It would be great to compile in this manner:

string -> ruby AST
rb AST -> more optimized rb AST 0+ times
rb AST -> js AST
js AST -> more optimized js AST 0+ times
js AST -> string

One possible path to this point is to implement a compiler from jruby AST to js in jruby, and then a parser, AST, optional AST->AST passes, the rbAST->jsAST compiler, and js unparsing in ruby.  Then the whole thing can self-host.

Ideally, the entire toolchain should be in ruby, to the extent to which that is possible.


'lambda {|x| x + 1 }' should compile something like this:
(lambda (x) (+ x 1))
(lambda (x:int) (+ x:int 1))  ; optional typeinference *insert far-future handwaving here*
(function (x:int) (return (binop+ x:int 1)))
'function (x){ return x + 1;}'

parsing is pretty hard but has been solved in ruby already: ruby_parser handles it.  The rest of the compiler proper is fairly trivial by comparison.
